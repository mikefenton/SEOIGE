#delaunay.bnf - an automatic delaunay truss generator
#Michael Fenton <michaelfenton1@gmail.com>

<S> ::= <program>{}<call>
<program> ::= def mutant():{<init>{}<constants>{}<cross_brace>{}<make_truss>{}<make_all>{}<return>{}}
<init> ::= truss_graph = graph.graph(){}state = random.getstate(){}<material_array>{}
<material_array> ::= material_array = [<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>,<material>]
<constants> ::= span = <span>{}depth = <depth>{}edge_list = []{}truss_graph.save_graph_info(["delaunay", span, depth]){}

<cross_brace> ::= def cross_brace():{NON_TRIANGLE = False{}top_ids = []{}bottom_ids = []{}top_list = [[0, None, 0, None, depth], [0, None, <half_span>, None, depth]]{}bottom_list = [[0, None, 0, None, 0], [0, None, <half_span>, None, 0]]{}"""Delaunay"""{}sett = [[0, random.seed(int("969")), 24000/2-random.randint(0,24000/2), random.seed(int("729")), depth-0],[0, random.seed(int("282")), 24000/2-random.randint(0,24000/2), random.seed(int("751")), depth-random.randint(100,depth-100)],[0, random.seed(int("927")), 24000/2-random.randint(0,24000/2), random.seed(int("055")), depth-0],[0, random.seed(int("184")), 24000/2-random.randint(0,24000/2), random.seed(int("064")), depth-random.randint(100,depth-100)],[0, random.seed(int("713")), 24000/2-random.randint(0,24000/2), random.seed(int("719")), depth-random.randint(100,depth-100)],[0, random.seed(int("036")), 24000/2-24000/2, random.seed(int("384")), depth-depth],[0, random.seed(int("598")), 24000/2-random.randint(0,24000/2), random.seed(int("765")), depth-0],[0, random.seed(int("272")), 24000/2-random.randint(0,24000/2), random.seed(int("939")), depth-random.randint(100,depth-100)],[0, random.seed(int("826")), 24000/2-random.randint(0,24000/2), random.seed(int("125")), depth-0],[0, random.seed(int("934")), 24000/2-random.randint(0,24000/2), random.seed(int("463")), depth-depth],[0, random.seed(int("614")), 24000/2-random.randint(0,24000/2), random.seed(int("846")), depth-0],[0, random.seed(int("021")), 24000/2-random.randint(0,24000/2), random.seed(int("082")), depth-0],[0, random.seed(int("638")), 24000/2-random.randint(0,24000/2), random.seed(int("799")), depth-depth],[0, random.seed(int("001")), 24000/2-random.randint(0,24000/2), random.seed(int("713")), depth-0],[0, random.seed(int("454")), 24000/2-random.randint(0,24000/2), random.seed(int("704")), depth-random.randint(100,depth-100)],[0, random.seed(int("137")), 24000/2-random.randint(0,24000/2), random.seed(int("022")), depth-depth]]{}for node in top_list:{if node not in sett:{sett.append(node)}}{}for node in bottom_list:{if node not in sett:{sett.append(node)}}{}sett.sort(){}for point in sett:{node = [point[0], point[2], point[4]]{}node_id = truss_graph.add_unique_node(node, str(node))}{}new_set = []{}for node in truss_graph.node:{point = truss_graph.node[node]['xyz']{}new_set_point = [point[1], point[2]]{}new_set.append(new_set_point)}{}answer = delaunay.Triangulation(new_set){}for i, triangle in enumerate(answer.get_elements_indices()):{if len(triangle) == 3:{one = [triangle[0], triangle[1]]{}two = [triangle[1], triangle[2]]{}three = [triangle[0], triangle[2]]{}if one not in edge_list:{edge_list.append(one)}if two not in edge_list:{edge_list.append(two)}if three not in edge_list:{edge_list.append(three)}}else:{print "Non-triangle detected: ", len(triangle){}NON_TRIANGLE = True{}break}}return NON_TRIANGLE}

<make_truss> ::= def make_truss():{target = len(edge_list){}for i, edge in enumerate(edge_list):{truss_graph.add_edge(edge[0], edge[1], material=material_array[i])}}

<material> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 | 154 | 155 | 156

<span> ::= 24000
<half_span> ::= <span>/2
<depth> ::= <span>/22

<make_all> ::= NON_TRIANGLE = cross_brace(){}make_truss(){}truss_graph.sort_support_nodes(truss_graph, span){}truss_graph.sort_load_nodes(truss_graph, span, depth){}mirror_graph = truss_graph.copy_and_offset_with_mirror(truss_graph, [0, 0, 0], True){}truss_graph.replace_graph(mirror_graph){}random.setstate(state){}
<return> ::= return [truss_graph, len(edge_list), NON_TRIANGLE, True]{}
<call> ::= XXXeval_or_exec_outputXXX = mutant()
