#trusses.bnf - an automatic truss generator
#Michael Fenton <michaelfenton1@gmail.com>

<S> ::= <program>{}<call>

<program> ::= def program():{<init>{}<constants>{}<define_funcs>{}<make_all>{}<return>{}}

<init> ::= truss_graph = graph.graph(){}

<constants> ::= span = <span>{}depth = <depth>{}r = <r>{}

<define_funcs> ::= <chord>{}<cross_brace>{}

<chord> ::= def chord(r):{top_chord = []{}bottom_chord = []{}for i in range (r+1):{bay_span = (i)*half_span/(r){}tnode, bnode = [0,bay_span,depth], [0,bay_span,0]{}top_chord.append(tnode){}bottom_chord.append(bnode)}return top_chord, bottom_chord}

<cross_brace> ::= def cross_brace(r):{edge_list = []{}top_ids = []{}bottom_ids = []{}chords = chord(r){}top_chord = chords[0]{}bottom_chord = chords[1]{}<truss_type>for i, edge in enumerate(edge_list):{truss_graph.add_edge(edge[0], edge[1], material=genome[i])}return edge_list}

<connection_type> ::= <howe>|<pratt>|<howe>|<fully_braced>|<warren>|<modified_warren>|<vierendeel>

<pratt> ::= """Pratt"""{}connect_pratt_truss{}

<howe> ::= """Howe"""{}connect_howe_truss{}

<fully_braced> ::= """Fully Braced"""{}connect_fully_braced_truss{}

<warren> ::= """Warren"""{}connect_warren_truss{}

<modified_warren> ::= """Modified Warren"""{}connect_modified_warren_truss{}

<vierendeel> ::= """Vierendeel"""{}connect_vierendeel_truss{}

<r> ::= 2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20
<span> ::= 24000
<depth> ::= <span>/10|<span>/11|<span>/12|<span>/13|<span>/14|<span>/15|<span>/16|<span>/17|<span>/18|<span>/19|<span>/20|<span>/21|<span>/22|<span>/23|<span>/24|<span>/25

<make_all> ::= edge_list = cross_brace(r){}mirror_graph = truss_graph.mirror(truss_graph){}
<return> ::= return mirror_graph{}
<call> ::= output = program()
