#delaunay_cantilever.bnf - an automatic delaunay cantilevered truss generator
#Michael Fenton <michaelfenton1@gmail.com>

<S> ::= <program>{}<call>
<program> ::= def mutant():{<set_mesh_resolution>{}<init>{}<constants>{}<get_y>{}<cross_brace>{}<get_genome>{}<make_truss>{}<make_all>{}<return>{}}
<init> ::= truss_graph = graph.graph(){}state = random.getstate(){}resolution = set_mesh_resolution(){}
<constants> ::= span = <span>{}depth = <depth>{}edge_list = []{}truss_graph.save_graph_info(["delaunay", span, depth]){}

<cross_brace> ::= def cross_brace():{top_ids = []{}bottom_ids = []{}resolution = set_mesh_resolution(){}top_list = [[0, None, <span>, None, depth, "fixed"]]{}bottom_list = [[0, None, 0, None, 0, "load"],[0, None, <half_span>, None, 0, "load"],[0, None, <span>, None, 0, "fixed"]]{}"""Delaunay"""{}set_a = [<node_iter>]{}set_b = []{}for node in top_list:{if node not in set_b:{set_b.append(node)}}{}for node in bottom_list:{if node not in set_b:{set_b.append(node)}}for node in set_a:{b = get_y(node[3],node[2]){}arse = [0,node[0],node[1],b[0], b[1], b[2]]{}set_b.append(arse)}{}a_set = []{}b_set = []{}for point in set_b:{node = [point[2], point[4], point[0]]{}label = point[5]{}item = [node, label]{}if a_set:{if item not in a_set:{if item[0] not in b_set:{a_set.append(item){}b_set.append(item[0])}else:{break}}}else:{a_set.append(item){}b_set.append(item[0])}}a = []{}b = []{}oppo = []{}for node in a_set:{node_id = truss_graph.add_unique_node(node[0], str(node[1])){}a.append(node[0][0]){}b.append(node[0][1]){}if str(node[1]) == "bottom":{oppo.append(node[0])}}oppo.sort(key=itemgetter(1)){}cens,edg,tri,neig = triang.delaunay(a,b){}for i, triangle in enumerate(tri):{if len(triangle) == 3:{one = [triangle[0], triangle[1]]{}two = [triangle[1], triangle[2]]{}three = [triangle[0], triangle[2]]{}many = [one, two, three]{}for blah in many:{blah.sort{}if blah not in edge_list:{if (a_set[blah[0]][1] == "fixed" and a_set[blah[1]][1] == "lower_centre") or (a_set[blah[0]][1] == "lower_centre" and a_set[blah[1]][1] == "fixed"):{if len(oppo) == 0:{edge_list.append(blah)}}elif (a_set[blah[0]][1] == "fixed" and a_set[blah[1]][1] == "bottom"):{if a_set[blah[1]][0][2] == oppo[-1][2]:{edge_list.append(blah)}}elif (a_set[blah[1]][1] == "fixed" and a_set[blah[0]][1] == "bottom"):{if a_set[blah[0]][0][2] == oppo[-1][2]:{edge_list.append(blah)}}elif (a_set[blah[0]][1] == "bottom" and a_set[blah[1]][1] == "lower_centre"):{if a_set[blah[0]][0][2] == oppo[0][2]:{edge_list.append(blah)}}elif (a_set[blah[1]][1] == "bottom" and a_set[blah[0]][1] == "lower_centre"):{if a_set[blah[1]][0][2] == oppo[0][2]:{edge_list.append(blah)}}elif (a_set[blah[0]][1] == "bottom" and a_set[blah[1]][1] == "bottom"):{for i, a in enumerate(oppo):{if i+1 < len(oppo):{if a_set[blah[0]][0] == a and a_set[blah[1]][0] == oppo[i+1]:{edge_list.append(blah)}if a_set[blah[1]][0] == a and a_set[blah[0]][0] == oppo[i+1]:{edge_list.append(blah)}}}}else:{edge_list.append(blah)}}}}}}

<get_genome> ::= def get_genome(i):{return genome[i]}
<make_truss> ::= def make_truss():{target = len(edge_list){}for i, edge in enumerate(edge_list):{truss_graph.add_edge(edge[0], edge[1], material=get_genome(i), genome_id=i)}}
<set_mesh_resolution> ::= def set_mesh_resolution():{if ave:{resolution = 10}else:{resolution = 100}return resolution}

<n> ::= 0|1|2|3|4|5|6|7|8|9
<nn> ::= 1|2|3|4|5|6|7|8|9

<get_y> ::= def get_y(input_0, input_1):{if input_1 == "upper_bound":{return None, depth, "top"}elif input_1 == "lower_bound":{return None, 0, "bottom"}else:{<set_rand>{}return None, random.randrange(0,depth, resolution), "interior"}}

<choose_y> ::= "upper_bound" | "lower_bound" | "interior"
<node> ::= [<set_rand>, <rand_x>, <choose_y>, <seed>]
<rand_x> ::= <span>-random.randrange(0, <span>, resolution)
<set_rand> ::= random.seed(<seed>)

<seed> ::= int(<GECodonValue>)
<span> ::= 18288
<half_span> ::= <span>/2
<depth> ::= 9144

<node_iter> ::= <node> | <node>,<node_iter> | <node>,<node_iter> | <node>,<node_iter>

<make_all> ::= cross_brace(){}make_truss(){}truss_graph.replace_graph(truss_graph){}random.setstate(state){}
<return> ::= return [truss_graph, len(edge_list), False, "cant", genome[:len(edge_list)]]{}
<call> ::= XXXeval_or_exec_outputXXX = mutant()
